<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://thomasmaslow.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://thomasmaslow.github.io/" rel="alternate" type="text/html" /><updated>2023-05-08T20:44:03+02:00</updated><id>https://thomasmaslow.github.io/feed.xml</id><title type="html">DIY Blog</title><subtitle>My personal introduction and story, my interests, and what to expect from my blog.</subtitle><entry><title type="html">A new tool for Postgres database schema migrations</title><link href="https://thomasmaslow.github.io/blog/new-tool-for-postgres-database-schema-migrations" rel="alternate" type="text/html" title="A new tool for Postgres database schema migrations" /><published>2023-04-28T13:25:12+02:00</published><updated>2023-04-28T13:25:12+02:00</updated><id>https://thomasmaslow.github.io/blog/new-tool-for-postgres-database-schema-migrations</id><content type="html" xml:base="https://thomasmaslow.github.io/blog/new-tool-for-postgres-database-schema-migrations"><![CDATA[<p>PostgreSQL is a powerful open-source relational database management system that is used by many developers in a lot of projects around the world. As your application grows and evolves, so will your database schema. Managing schema changes can be a challenging task, but there are tools available that can help simplify the process. One such tool is Schema Guard.</p>

<p><a href="https://www.thomasmaslow.ru/streamline-your-database-schema-management-with-schema-duard.php">Schema Guard</a> is a powerful and flexible database schema migration tool that makes it easy to manage and apply changes to your PostgreSQL schema. With this tool, developers can create and track migration files that describe changes to your database schema. These migration files can be versioned and stored in a source control system, making it easy to collaborate with other developers and ensure consistency across environments.</p>

<p>Let’s look at some examples of how Schema Guard can be used to manage database schema changes. Suppose you want to add a new table to your database schema. You would first create a new migration file that describes the changes you want to make, such as:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">new_table</span> <span class="p">(</span> <span class="n">id</span> <span class="nb">SERIAL</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span> <span class="n">name</span> <span class="nb">TEXT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <span class="n">description</span> <span class="nb">TEXT</span> <span class="p">);</span></code></pre></figure>

<p>You would then run the tool to apply the migration, using the following command:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="n">rdbm</span> <span class="n">apply</span></code></pre></figure>

<p>This would apply the migration and create the new table in your database schema.</p>

<p>Now, suppose you want to modify an existing table by adding a new column. You would create a new migration file that describes the changes, such as:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">existing_table</span> <span class="k">ADD</span> <span class="k">COLUMN</span> <span class="n">new_column</span> <span class="nb">TEXT</span><span class="p">;</span></code></pre></figure>

<p>And once again, you would run the Schema Guard tool to apply the migration.</p>

<p>Schema Guard also makes it easy to roll back changes if necessary. Suppose you applied a migration that caused problems with your application. You could use the following command to roll back the last applied migration:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="n">rdbm</span> <span class="k">rollback</span></code></pre></figure>

<p>This would undo the last applied migration and restore your schema to its previous state.</p>

<p>In addition to its core functionality, Schema Guard also provides a number of features that make it even more powerful and flexible. For example, you can use this tool to generate SQL scripts that can be used to create or modify the schema on a different machine or in a different environment.</p>

<p>Another useful feature of Schema Guard is its ability to detect and prevent conflicts between migration files. If two developers create conflicting migration files, it will detect the conflict and prevent the migrations from being applied until the conflict is resolved.</p>

<p>Overall, Schema Guard is a powerful tool that can help you streamline your database schema management process. By providing a simple and flexible way to manage schema changes, Schema Guard can help you avoid common pitfalls such as inconsistencies and errors in your database schema. Whether you are a seasoned PostgreSQL developer or just getting started, Schema Guard is definitely worth considering for your schema migration needs. By providing a centralized location for tracking and applying changes, Schema Guard can help ensure consistency and reduce errors in your database schema. Whether you’re a seasoned PostgreSQL developer or just getting started, Schema Guard is definitely worth considering for your schema migration needs.</p>]]></content><author><name></name></author><category term="postgres" /><category term="sql" /><category term="database" /><category term="schema" /><category term="migrations" /><category term="postgres" /><category term="sql" /><category term="database" /><category term="schema" /><category term="migrations" /><summary type="html"><![CDATA[New Schema Guard tool to centralize tracking and applying of schema changes.]]></summary></entry><entry><title type="html">Verifying Database Backups with MD5 Checksums</title><link href="https://thomasmaslow.github.io/blog/verifying-database-backups-with-md5-checksums" rel="alternate" type="text/html" title="Verifying Database Backups with MD5 Checksums" /><published>2023-03-23T14:03:34+01:00</published><updated>2023-03-23T14:03:34+01:00</updated><id>https://thomasmaslow.github.io/blog/verifying-database-backups-with-md5-checksums</id><content type="html" xml:base="https://thomasmaslow.github.io/blog/verifying-database-backups-with-md5-checksums"><![CDATA[<p>As someone who has worked with databases, I know how important it is to have reliable backups of your data. However, it’s not enough to simply create backups – you need to verify that they are not corrupted and can be restored in case of a disaster. This is where the MD5 checksum checker tool comes in handy.</p>

<p>The MD5 checksum is a unique value calculated based on the contents of a file. If the file contents are modified, even by a single byte, the MD5 checksum changes. By comparing the MD5 checksums of the source and destination files, you can ensure that the files are identical and not corrupted during the transfer.</p>

<p>While Linux has a built-in md5 command, Windows users need to download and install an MD5 <a href="https://www.fastsum.com/">checksum checker tool</a>, it is the one of the most handy options for Windows. Which offers both a command-line version and a GUI version. The command-line version is free to use, while the GUI version is a commercial product.</p>

<p>To demonstrate how to use the MD5 checksum checker tool for database backups, I’ll walk you through an example scenario. Let’s say you have a database server running on a Windows machine, and you want to create a backup of the database and transfer it to another Windows machine over the network. Here are the steps you can follow:</p>

<p>Create a database backup file using your preferred method (e.g., pg_dump for PostgreSQL databases).</p>

<p>Calculate the MD5 checksum of the backup file using FastSum’s command-line tool. Open a command prompt and navigate to the directory where the backup file is located. Then, enter the following command:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">fsum C:<span class="se">\D</span>ata<span class="se">\*</span>.zip /T:F /R</code></pre></figure>

<p>This will calculate the MD5 checksum of the backup file and display it in the command prompt.</p>

<p>Transfer the backup file to the destination machine using a file transfer protocol such as FTP or rsync.</p>

<p>On the destination machine, calculate the MD5 checksum of the transferred backup file using FastSum’s command-line tool. Open a command prompt and navigate to the directory where the transferred file is located. Then, enter the following command:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">fsum C:<span class="se">\D</span>ata /T:F /R /V</code></pre></figure>

<p>This will calculate the MD5 checksum of the transferred file and display it in the command prompt.</p>

<p>Compare the MD5 checksums of the source and destination files. If they match, it means the backup file was transferred without any corruption. If they don’t match, it means the file was corrupted during the transfer, and you should re-transfer the file.</p>

<p>In addition to using the MD5 checksum checker tool, it’s a good practice to also verify the integrity of your database backups by restoring them to a test environment and checking if the data is intact. However, using the MD5 checksum checker tool is a quick and easy way to ensure that your backups are not corrupted during the transfer.</p>

<p>In conclusion, using an MD5 checksum checker tool like FastSum can help you verify the integrity of your database backups when transferring them over the network. With just a few simple commands, you can calculate the MD5 checksum of your backup files and ensure that they are identical on both the source and destination machines. While Windows users need to download and install an MD5 checksum checker tool, FastSum’s command-line version is free to use and provides an easy way to check the integrity of your database backups.</p>]]></content><author><name></name></author><category term="postgres" /><category term="database" /><category term="pg-dump" /><category term="fastsum" /><category term="fsum" /><category term="md5" /><category term="integrity" /><category term="postgres" /><category term="database" /><category term="pg-dump" /><category term="fastsum" /><category term="fsum" /><category term="md5" /><category term="integrity" /><summary type="html"><![CDATA[My Experience Using MD5 Checksum Tool for Verifying Database Backups.]]></summary></entry></feed>